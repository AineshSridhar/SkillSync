generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  email           String           @unique
  password        String
  name            String?
  createdAt       DateTime         @default(now())
  profile         Profile?
  skills          UserSkill[]
  ownedProjects   Project[]        @relation("OwnedProjects")
  partnerships    Partnership[]
  applications    Application[]
  peerRatings     PeerRating[]     // Ratings given to this user by peers
  givenPeerRatings PeerRating[]    @relation("Rater") // Ratings this user has given
  userScore       UserScore?
}

model Profile {
  id         Int     @id @default(autoincrement())
  user       User    @relation(fields: [userId], references: [id])
  userId     Int     @unique
  name       String?
  bio        String?
  linkedin   String?
  leetcode   String?
  resumeUrl  String?           // S3/local path for resume (future use)
  resumeFile Bytes?            // Store resume file directly in MySQL (temporary)
  profilePicUrl String?        // S3/local path for profile pic (future use)
  profilePic  Bytes?           // Store profile picture directly in MySQL (temporary)
}

model Skill {
  id      Int         @id @default(autoincrement())
  name    String      @unique
  users   UserSkill[]
}

model UserSkill {
  user    User   @relation(fields: [userId], references: [id])
  userId  Int
  skill   Skill  @relation(fields: [skillId], references: [id])
  skillId Int

  @@id([userId, skillId])
}

model Project {
  id          Int                   @id @default(autoincrement())
  owner       User                  @relation("OwnedProjects", fields: [ownerId], references: [id])
  ownerId     Int
  title       String
  description String?
  createdAt   DateTime              @default(now())
  partnerships Partnership[]
  requiredRoles   ProjectRequiredRole[]
  peerRatings     PeerRating[]     // All peer ratings for this project
}

model Partnership {
  id        Int      @id @default(autoincrement())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  role      String?
}

model Application {
  id                    Int                 @id @default(autoincrement())
  user                  User                @relation(fields: [userId], references: [id])
  userId                Int
  projectRequiredRole   ProjectRequiredRole? @relation(fields: [projectRequiredRoleId], references: [id])
  projectRequiredRoleId Int?
  status                String?             // e.g., "Applied", "Interviewing", "Rejected", "Accepted"
  appliedAt             DateTime            @default(now())
}

model ProjectRequiredRole {
  id                Int                 @id @default(autoincrement())
  project           Project             @relation(fields: [projectId], references: [id])
  projectId         Int
  role              String
  expertiseLevel    String
  peopleRequired    Int                 @default(1)
  isLive            Boolean             @default(true)
  applications      Application[]
}

model PeerRating {
  id           Int      @id @default(autoincrement())
  ratedUser    User     @relation(fields: [ratedUserId], references: [id])
  ratedUserId  Int
  rater        User     @relation("Rater", fields: [raterId], references: [id])
  raterId      Int
  project      Project? @relation(fields: [projectId], references: [id])
  projectId    Int?
  workEthic    Float?
  creativity   Float?
  skills       Float?

  @@unique([ratedUserId, raterId, projectId])
}

model UserScore {
  id                Int    @id @default(autoincrement())
  user              User   @relation(fields: [userId], references: [id])
  userId            Int    @unique

  // Automated (AI/analysis) scores
  automatedWorkEthic     Float?
  automatedCreativity    Float?
  automatedSkills        Float?
  automatedOverall       Float? // e.g., average of the above or other logic

  // Bayesian peer scores
  peerWorkEthic          Float?
  peerCreativity         Float?
  peerSkills             Float?
  peerOverall            Float? // e.g., average of the above or other logic

  // Final composite scores (your chosen formula)
  finalWorkEthic         Float?
  finalCreativity        Float?
  finalSkills            Float?
  finalOverall           Float?

  updatedAt              DateTime @updatedAt
}
